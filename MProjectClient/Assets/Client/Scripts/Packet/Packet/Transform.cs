// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MProject.Packet
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Transform : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Transform GetRootAsTransform(ByteBuffer _bb) { return GetRootAsTransform(_bb, new Transform()); }
  public static Transform GetRootAsTransform(ByteBuffer _bb, Transform obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Transform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MProject.Packet.Vector? Position { get { int o = __p.__offset(4); return o != 0 ? (MProject.Packet.Vector?)(new MProject.Packet.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public MProject.Packet.Quaternion? Rotation { get { int o = __p.__offset(6); return o != 0 ? (MProject.Packet.Quaternion?)(new MProject.Packet.Quaternion()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public MProject.Packet.Vector? Scale { get { int o = __p.__offset(8); return o != 0 ? (MProject.Packet.Vector?)(new MProject.Packet.Vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<MProject.Packet.Transform> CreateTransform(FlatBufferBuilder builder,
      Offset<MProject.Packet.Vector> positionOffset = default(Offset<MProject.Packet.Vector>),
      Offset<MProject.Packet.Quaternion> rotationOffset = default(Offset<MProject.Packet.Quaternion>),
      Offset<MProject.Packet.Vector> scaleOffset = default(Offset<MProject.Packet.Vector>)) {
    builder.StartTable(3);
    Transform.AddScale(builder, scaleOffset);
    Transform.AddRotation(builder, rotationOffset);
    Transform.AddPosition(builder, positionOffset);
    return Transform.EndTransform(builder);
  }

  public static void StartTransform(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<MProject.Packet.Vector> positionOffset) { builder.AddOffset(0, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<MProject.Packet.Quaternion> rotationOffset) { builder.AddOffset(1, rotationOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, Offset<MProject.Packet.Vector> scaleOffset) { builder.AddOffset(2, scaleOffset.Value, 0); }
  public static Offset<MProject.Packet.Transform> EndTransform(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MProject.Packet.Transform>(o);
  }
}


}
