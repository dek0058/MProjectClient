// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MProject.Packet
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FTransform : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static FTransform GetRootAsFTransform(ByteBuffer _bb) { return GetRootAsFTransform(_bb, new FTransform()); }
  public static FTransform GetRootAsFTransform(ByteBuffer _bb, FTransform obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FTransform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MProject.Packet.FVector? Position { get { int o = __p.__offset(4); return o != 0 ? (MProject.Packet.FVector?)(new MProject.Packet.FVector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public MProject.Packet.FQuaternion? Rotation { get { int o = __p.__offset(6); return o != 0 ? (MProject.Packet.FQuaternion?)(new MProject.Packet.FQuaternion()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public MProject.Packet.FVector? Scale { get { int o = __p.__offset(8); return o != 0 ? (MProject.Packet.FVector?)(new MProject.Packet.FVector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<MProject.Packet.FTransform> CreateFTransform(FlatBufferBuilder builder,
      Offset<MProject.Packet.FVector> positionOffset = default(Offset<MProject.Packet.FVector>),
      Offset<MProject.Packet.FQuaternion> rotationOffset = default(Offset<MProject.Packet.FQuaternion>),
      Offset<MProject.Packet.FVector> scaleOffset = default(Offset<MProject.Packet.FVector>)) {
    builder.StartTable(3);
    FTransform.AddScale(builder, scaleOffset);
    FTransform.AddRotation(builder, rotationOffset);
    FTransform.AddPosition(builder, positionOffset);
    return FTransform.EndFTransform(builder);
  }

  public static void StartFTransform(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<MProject.Packet.FVector> positionOffset) { builder.AddOffset(0, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<MProject.Packet.FQuaternion> rotationOffset) { builder.AddOffset(1, rotationOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, Offset<MProject.Packet.FVector> scaleOffset) { builder.AddOffset(2, scaleOffset.Value, 0); }
  public static Offset<MProject.Packet.FTransform> EndFTransform(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MProject.Packet.FTransform>(o);
  }
}


}
