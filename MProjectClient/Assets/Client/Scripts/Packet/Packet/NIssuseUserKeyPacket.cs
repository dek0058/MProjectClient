// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MProject.Packet
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct NIssuseUserKeyPacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static NIssuseUserKeyPacket GetRootAsNIssuseUserKeyPacket(ByteBuffer _bb) { return GetRootAsNIssuseUserKeyPacket(_bb, new NIssuseUserKeyPacket()); }
  public static NIssuseUserKeyPacket GetRootAsNIssuseUserKeyPacket(ByteBuffer _bb, NIssuseUserKeyPacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NIssuseUserKeyPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Key { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<MProject.Packet.NIssuseUserKeyPacket> CreateNIssuseUserKeyPacket(FlatBufferBuilder builder,
      uint key = 0) {
    builder.StartTable(1);
    NIssuseUserKeyPacket.AddKey(builder, key);
    return NIssuseUserKeyPacket.EndNIssuseUserKeyPacket(builder);
  }

  public static void StartNIssuseUserKeyPacket(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddKey(FlatBufferBuilder builder, uint key) { builder.AddUint(0, key, 0); }
  public static Offset<MProject.Packet.NIssuseUserKeyPacket> EndNIssuseUserKeyPacket(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MProject.Packet.NIssuseUserKeyPacket>(o);
  }
  public static void FinishNIssuseUserKeyPacketBuffer(FlatBufferBuilder builder, Offset<MProject.Packet.NIssuseUserKeyPacket> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedNIssuseUserKeyPacketBuffer(FlatBufferBuilder builder, Offset<MProject.Packet.NIssuseUserKeyPacket> offset) { builder.FinishSizePrefixed(offset.Value); }
}


}
